version: '3.8'

services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    environment:
      - PRODUCTS_SERVICE_URL=http://products-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - ORDERS_SERVICE_URL=http://orders-service:8000
      - SEARCH_SERVICE_URL=http://search-service:8000
    depends_on:
      products-service:
        condition: service_started
      user-service:
        condition: service_started
      orders-service:
        condition: service_started
      search-service:
        condition: service_started

  # Serviciul pentru Produse
  products-service:
    build: ./products-service
    volumes:
      - ./products-service/app:/code/app
    environment:
      - ROOT_PATH=/products
      - DATABASE_URL=postgresql://user:password@products_db/products_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq
      - SECRET_KEY=o_cheie_foarte_secreta_si_lunga_123!@#
      - ALGORITHM=HS256
    depends_on:
      products_db:
        condition: service_healthy # <-- MODIFICARE AICI
      rabbitmq:
        condition: service_healthy # <-- Asiguram ca RabbitMQ este sanatos

  # Baza de date pentru Produse
  products_db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - products_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=products_db
    healthcheck:
      # <-- SECTIUNE NOUA
      test: [ "CMD-SHELL", "pg_isready -U user -d products_db" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviciul pentru Utilizatori
  user-service:
    build: ./user-service
    volumes:
      - ./user-service/app:/code/app
    environment:
      - ROOT_PATH=/users
      - DATABASE_URL=postgresql://user:password@user_db/user_db
      - SECRET_KEY=o_cheie_foarte_secreta_si_lunga_123!@#
      - ALGORITHM=HS256
    depends_on:
      user_db:
        condition: service_healthy # <-- MODIFICARE AICI

  # Baza de date pentru Utilizatori
  user_db:
    image: postgres:14-alpine
    ports:
      - "5433:5432"
    volumes:
      - user_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=user_db
    healthcheck:
      # <-- SECTIUNE NOUA
      test: [ "CMD-SHELL", "pg_isready -U user -d user_db" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # NOUL SERVICIU PENTRU COMENZI
  orders-service:
    build: ./orders-service
    volumes:
      - ./orders-service/app:/code/app
    environment:
      - ROOT_PATH=/orders
      - DATABASE_URL=postgresql://user:password@orders_db/orders_db
      # Adresa interna a serviciului de produse
      - PRODUCTS_SERVICE_URL=http://products-service:8000
      - SECRET_KEY=o_cheie_foarte_secreta_si_lunga_123!@# # <-- Adaugă asta
      - ALGORITHM=HS256 # <-- Și asta
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq
    depends_on:
      orders_db:
        condition: service_healthy
      products-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy # <-- Asiguram ca RabbitMQ este sanatos
  # NOUA BAZA DE DATE PENTRU COMENZI
  orders_db:
    image: postgres:14-alpine
    ports:
      - "5434:5432"
    volumes:
      - orders_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=orders_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d orders_db" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # NOUL SERVICIU PENTRU MESSAGE BROKER
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672" # Portul pentru comunicarea aplicatiilor
      - "15672:15672" # Portul pentru interfata web de management
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- SERVICII NOI PENTRU CĂUTARE ---
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Dezactivăm securitatea pentru simplitate în dezvoltare
    ports:
      - "9200:9200" # Portul API pentru Elasticsearch
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.3
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601" # Portul pentru interfața web Kibana
    depends_on:
      - elasticsearch

  search-service:
    build: ./search-service
    volumes:
      - ./search-service/app:/code/app
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq
      - ELASTICSEARCH_URL=http://elasticsearch:9200

# Definirea volumelor
volumes:
  products_data:
  user_data:
  orders_data:
  elastic_data:
